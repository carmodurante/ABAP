*Programa 7 CALL TRANSACTION
*&---------------------------------------------------------------------*
*& Report ZC00110 *
*&---------------------------------------------------------------------*
*& PROGRAMA PARA BATCH IMPUT *
*&---------------------------------------------------------------------*
REPORT ZC00110.
* Tabela interna para receber dados importados
DATA : BEGIN OF t_tabela OCCURS 0,
texto01(1000) TYPE C,
END OF t_tabela.
DATA: BEGIN OF T_TEMPO OCCURS 0,
BUKRS TYPE RF02K-BUKRS,
EKORG TYPE RF02K-EKORG,
KTOKK TYPE RF02K-KTOKK,
NAME1 TYPE LFA1-NAME1,
SORTL TYPE LFA1-SORTL,
ORT01 TYPE LFA1-ORT01,
PSTLZ TYPE LFA1-PSTLZ,
LAND1 TYPE LFA1-LAND1,
REGIO TYPE LFA1-REGIO,
SPRAS TYPE LFA1-SPRAS,
STCD1 TYPE LFA1-STCD1,
TXJCD TYPE LFA1-TXJCD,
BANKS TYPE LFBK-BANKS,
BANKL TYPE LFBK-BANKL,
BANKN TYPE LFBK-BANKN,
KOINH TYPE LFBK-KOINH,
AKONT TYPE LFB1-AKONT,
FDGRV TYPE LFB1-FDGRV,
REPRF TYPE LFB1-REPRF,
ZWELS TYPE LFB1-ZWELS,
WAERS TYPE LFM1-WAERS,
ZTERM TYPE LFM1-ZTERM,
WEBRE TYPE LFM1-WEBRE,
END OF T_TEMPO.
* COMO CRIAR UMA TABELA INTERNA COPIANDO A ESTRUTURA DA TABELA INTERNA.
* para BATCH IMPUT devemos usar a tabela BDCDATA
DATA : BEGIN OF t_bdc OCCURS 0.
INCLUDE STRUCTURE bdcdata.
DATA : END OF t_bdc.
* para BATCH IMPUT devemos usar a tabela BDCMSGCOLL para
* guardar as mensagens de erro
DATA : BEGIN OF t_msg OCCURS 0.
INCLUDE STRUCTURE BDCMSGCOLL.
DATA : END OF t_msg.
* delimitador do arquivo txt
CONSTANTS c_tipo TYPE C VALUE ';'.
.
SELECTION-SCREEN BEGIN OF BLOCK b_janela WITH FRAME TITLE text-001.
* nome do parametro para importar o arquivo -> RLGRAP-FILENAME
PARAMETERS P_ARQ LIKE RLGRAP-FILENAME.
SELECTION-SCREEN END OF BLOCK b_janela.
START-OF-SELECTION.
PERFORM F_IMPORTAR_DADOS.
PERFORM F_CARREGAR_DADOS.
PERFORM F_BATCH_IMPUT.
PERFORM F_TRANSACAO_XK01.
*&---------------------------------------------------------------------*
*& Form Z_IMPORTAR_DADOS
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
FORM F_IMPORTAR_DADOS .
* limpar a tabela de entrada e o header line da tabela
REFRESH t_tabela.
CLEAR t_tabela.
* FUNÇÃO PARA IMPORTAR ARQUIVO
* chamar a função usar o botão MODELO
CALL FUNCTION 'WS_UPLOAD'
EXPORTING
* CODEPAGE = ' '
FILENAME = P_ARQ " COLOCAR O NOME DA VARIAVEL
" IRA CONTER O NOME DO ARQUIVO
FILETYPE = 'ASC' " TIPO DE ARQUIVO
* HEADLEN = ' '
* LINE_EXIT = ' '
* TRUNCLEN = ' '
* USER_FORM = ' '
* USER_PROG = ' '
* DAT_D_FORMAT = ' '
* IMPORTING
* FILELENGTH =
TABLES
DATA_TAB = t_tabela " NOME DA TABELA INTERNA QUE
" IRA RECEBER OS DADOS
* CODIGOS DE ERROS DE RETONO
EXCEPTIONS
CONVERSION_ERROR = 1
FILE_OPEN_ERROR = 2
FILE_READ_ERROR = 3
INVALID_TYPE = 4
NO_BATCH = 5
UNKNOWN_ERROR = 6
INVALID_TABLE_WIDTH = 7
GUI_REFUSE_FILETRANSFER = 8
CUSTOMER_ERROR = 9
NO_AUTHORITY = 10
OTHERS = 11.
* tratamento dos erros.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.
ENDFORM. " F_IMPORTAR_DADOS
*&---------------------------------------------------------------------*
*& Form F_CARREGAR_DADOS
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
FORM F_CARREGAR_DADOS .
* LIMPAR A TABELA INTERNA
REFRESH t_tempo.
CLEAR t_tempo.
LOOP AT t_tabela.
* limpar o header line da tabela
CLEAR t_tempo.
* SPLIT tabela_interna AT delimitador_do_arquivo INTO
* campos que irão receber os dados na seqüência do
* arquivo
SPLIT t_tabela-texto01 AT c_tipo INTO T_TEMPO-BUKRS
T_TEMPO-EKORG
T_TEMPO-KTOKK
T_TEMPO-NAME1
T_TEMPO-SORTL
T_TEMPO-ORT01
T_TEMPO-PSTLZ
T_TEMPO-LAND1
T_TEMPO-REGIO
T_TEMPO-SPRAS
T_TEMPO-STCD1
T_TEMPO-TXJCD
T_TEMPO-BANKS
T_TEMPO-BANKL
T_TEMPO-BANKN
T_TEMPO-KOINH
T_TEMPO-AKONT
T_TEMPO-FDGRV
T_TEMPO-REPRF
T_TEMPO-ZWELS
T_TEMPO-WAERS
T_TEMPO-ZTERM
T_TEMPO-WEBRE.
* APPEND nome da tabela que ira guardar os dados importados gravar na tabela
APPEND t_tempo.
ENDLOOP.
ENDFORM. " F_CARREGAR_DADOS
*&---------------------------------------------------------------------*
*& Form F_BATCH_IMPUT
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
FORM F_BATCH_IMPUT .
LOOP AT t_tempo.
* PERFORM PARA PREENCHER A tabela BDC
* PERFORM F_BDC_TELA USING programa tela.
* PERFORM F_BDC_CAMPO USING campo valor.
* devemos passar os parâmetros obtidos na transação SHDB
PERFORM F_BDC_TELA USING 'SAPMF02K' '100'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'RF02K-REF_LIFNR'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'RF02K-BUKRS' T_TEMPO-BUKRS.
PERFORM F_BDC_CAMPO USING 'RF02K-EKORG' T_TEMPO-EKORG.
PERFORM F_BDC_CAMPO USING 'RF02K-KTOKK' T_TEMPO-KTOKK.
PERFORM F_BDC_TELA USING 'SAPMF02K' '110'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFA1-TELX1'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'LFA1-NAME1' T_TEMPO-NAME1.
PERFORM F_BDC_CAMPO USING 'LFA1-SORTL' T_TEMPO-SORTL.
PERFORM F_BDC_CAMPO USING 'LFA1-ORT01' T_TEMPO-ORT01.
PERFORM F_BDC_CAMPO USING 'LFA1-PSTLZ' T_TEMPO-PSTLZ.
PERFORM F_BDC_CAMPO USING 'LFA1-LAND1' T_TEMPO-LAND1.
PERFORM F_BDC_CAMPO USING 'LFA1-REGIO' T_TEMPO-REGIO.
PERFORM F_BDC_CAMPO USING 'LFA1-SPRAS' T_TEMPO-SPRAS.
PERFORM F_BDC_TELA USING 'SAPMF02K' '120'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFA1-STCD3'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'LFA1-STCD1' T_TEMPO-STCD1.
PERFORM F_BDC_CAMPO USING 'LFA1-TXJCD' T_TEMPO-TXJCD.
PERFORM F_BDC_TELA USING 'SAPMF02K' '130'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFBK-KOINH(01)'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'LFBK-BANKS(01)' T_TEMPO-BANKS.
PERFORM F_BDC_CAMPO USING 'LFBK-BANKL(01)' T_TEMPO-BANKL.
PERFORM F_BDC_CAMPO USING 'LFBK-BANKN(01)' T_TEMPO-BANKN.
PERFORM F_BDC_CAMPO USING 'LFBK-KOINH(01)' T_TEMPO-KOINH.
PERFORM F_BDC_TELA USING 'SAPMF02K' '130'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFBK-BANKS(01)'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '=ENTR'.
PERFORM F_BDC_TELA USING 'SAPMF02K' '210'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFB1-FDGRV'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'LFB1-AKONT' T_TEMPO-AKONT.
PERFORM F_BDC_CAMPO USING 'LFB1-FDGRV' T_TEMPO-FDGRV.
PERFORM F_BDC_TELA USING 'SAPMF02K' '215'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFB1-REPRF'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'LFB1-REPRF' T_TEMPO-REPRF.
PERFORM F_BDC_CAMPO USING 'LFB1-ZWELS' T_TEMPO-ZWELS.
PERFORM F_BDC_TELA USING 'SAPMF02K' '220'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFB5-LFRMA'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_TELA USING 'SAPMF02K' '610'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'RF02K-LIFNR'.
PERFORM F_BDC_TELA USING 'SAPMF02K' '310'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'LFM1-WEBRE'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '/00'.
PERFORM F_BDC_CAMPO USING 'LFM1-WAERS' T_TEMPO-WAERS.
PERFORM F_BDC_CAMPO USING 'LFM1-ZTERM' T_TEMPO-ZTERM.
PERFORM F_BDC_CAMPO USING 'LFM1-WEBRE' T_TEMPO-WEBRE.
PERFORM F_BDC_TELA USING 'SAPMF02K' '320'.
PERFORM F_BDC_CAMPO USING 'BDC_CURSOR' 'RF02K-LIFNR'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '=ENTR'.
PERFORM F_BDC_TELA USING 'SAPLSP01' '300'.
PERFORM F_BDC_CAMPO USING 'BDC_OKCODE' '=YES'.
ENDLOOP.
* EFETIVA AS ALTERAÇÕES NO BANCO
COMMIT WORK.
ENDFORM. " F_BATCH_IMPUT
*&---------------------------------------------------------------------*
*& Form F_BDC_TELA
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
FORM F_BDC_TELA USING P_PROGRAMA
P_TELA.
* limpa o head line
CLEAR t_bdc.
* preencher os campos da tabela
t_bdc-program = P_PROGRAMA.
t_bdc-dynpro = P_TELA.
t_bdc-dynbegin = 'X'.
APPEND t_bdc.
ENDFORM. " F_BDC_TELA
*&---------------------------------------------------------------------*
*& Form F_BDC_CAMPO
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
FORM F_BDC_CAMPO USING P_CAMPO
P_VALOR.
* limpa o read liner
CLEAR t_bdc.
t_bdc-fnam = P_campo.
t_bdc-fval = P_valor.
APPEND t_bdc.
ENDFORM. " F_BDC_CAMPO
*&---------------------------------------------------------------------*
*& Form F_TRANSACAO_XK01
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
FORM F_TRANSACAO_XK01 .
REFRESH T_MSG.
CLEAR T_MSG.
* COMANDO PARA CHAMAR TRANSAÇÃO
* CALL TRANSACTION 'transação' USING tabela_interna_com_os_dados MODE
* 'tp' UPDATE 'tp2' MESSAGES INTO tabela_mensagens
* tp -> A = DISPLAY
* E = ERROS
* N = NÃO MOSTRAR
* P = NÃO MSOTRAR / DEBUGAR
* tp2 = A -> ASSINCRONO
* S = SINCRONO
* L = LOCAL UPDATE
CALL TRANSACTION 'XK01' USING T_BDC MODE 'A'
UPDATE 'S' MESSAGES INTO T_MSG.
ENDFORM. " F_TRANSACAO_XK01